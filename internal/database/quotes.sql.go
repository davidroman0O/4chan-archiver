// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quotes.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const countQuotesByThread = `-- name: CountQuotesByThread :one
SELECT COUNT(*) as quote_count FROM quotes 
WHERE thread_id = ? AND board = ?
`

type CountQuotesByThreadParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
}

func (q *Queries) CountQuotesByThread(ctx context.Context, arg CountQuotesByThreadParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countQuotesByThread, arg.ThreadID, arg.Board)
	var quote_count int64
	err := row.Scan(&quote_count)
	return quote_count, err
}

const createQuote = `-- name: CreateQuote :one
INSERT INTO quotes (
    thread_id, board, post_no, quote_text, quote_type
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING id, thread_id, board, post_no, quote_text, quote_type, referenced_post_no, quote_context, created_at
`

type CreateQuoteParams struct {
	ThreadID  string `json:"thread_id"`
	Board     string `json:"board"`
	PostNo    int64  `json:"post_no"`
	QuoteText string `json:"quote_text"`
	QuoteType string `json:"quote_type"`
}

func (q *Queries) CreateQuote(ctx context.Context, arg CreateQuoteParams) (Quote, error) {
	row := q.db.QueryRowContext(ctx, createQuote,
		arg.ThreadID,
		arg.Board,
		arg.PostNo,
		arg.QuoteText,
		arg.QuoteType,
	)
	var i Quote
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Board,
		&i.PostNo,
		&i.QuoteText,
		&i.QuoteType,
		&i.ReferencedPostNo,
		&i.QuoteContext,
		&i.CreatedAt,
	)
	return i, err
}

const getGreentextByThread = `-- name: GetGreentextByThread :many
SELECT q.id, q.thread_id, q.board, q.post_no, q.quote_text, q.quote_type, q.referenced_post_no, q.quote_context, q.created_at, p.name, p.user_id, p.timestamp 
FROM quotes q
JOIN posts p ON q.post_no = p.post_no AND q.thread_id = p.thread_id AND q.board = p.board
WHERE q.thread_id = ? AND q.board = ? AND q.quote_type = 'greentext'
ORDER BY q.post_no ASC
`

type GetGreentextByThreadParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
}

type GetGreentextByThreadRow struct {
	ID               int64          `json:"id"`
	ThreadID         string         `json:"thread_id"`
	Board            string         `json:"board"`
	PostNo           int64          `json:"post_no"`
	QuoteText        string         `json:"quote_text"`
	QuoteType        string         `json:"quote_type"`
	ReferencedPostNo sql.NullInt64  `json:"referenced_post_no"`
	QuoteContext     sql.NullString `json:"quote_context"`
	CreatedAt        time.Time      `json:"created_at"`
	Name             string         `json:"name"`
	UserID           sql.NullString `json:"user_id"`
	Timestamp        int64          `json:"timestamp"`
}

func (q *Queries) GetGreentextByThread(ctx context.Context, arg GetGreentextByThreadParams) ([]GetGreentextByThreadRow, error) {
	rows, err := q.db.QueryContext(ctx, getGreentextByThread, arg.ThreadID, arg.Board)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGreentextByThreadRow{}
	for rows.Next() {
		var i GetGreentextByThreadRow
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.QuoteText,
			&i.QuoteType,
			&i.ReferencedPostNo,
			&i.QuoteContext,
			&i.CreatedAt,
			&i.Name,
			&i.UserID,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuotesByPost = `-- name: GetQuotesByPost :many
SELECT id, thread_id, board, post_no, quote_text, quote_type, referenced_post_no, quote_context, created_at FROM quotes 
WHERE thread_id = ? AND board = ? AND post_no = ?
ORDER BY id ASC
`

type GetQuotesByPostParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
	PostNo   int64  `json:"post_no"`
}

func (q *Queries) GetQuotesByPost(ctx context.Context, arg GetQuotesByPostParams) ([]Quote, error) {
	rows, err := q.db.QueryContext(ctx, getQuotesByPost, arg.ThreadID, arg.Board, arg.PostNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quote{}
	for rows.Next() {
		var i Quote
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.QuoteText,
			&i.QuoteType,
			&i.ReferencedPostNo,
			&i.QuoteContext,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuotesByThread = `-- name: GetQuotesByThread :many
SELECT id, thread_id, board, post_no, quote_text, quote_type, referenced_post_no, quote_context, created_at FROM quotes 
WHERE thread_id = ? AND board = ?
ORDER BY post_no ASC, id ASC
`

type GetQuotesByThreadParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
}

func (q *Queries) GetQuotesByThread(ctx context.Context, arg GetQuotesByThreadParams) ([]Quote, error) {
	rows, err := q.db.QueryContext(ctx, getQuotesByThread, arg.ThreadID, arg.Board)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quote{}
	for rows.Next() {
		var i Quote
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.QuoteText,
			&i.QuoteType,
			&i.ReferencedPostNo,
			&i.QuoteContext,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchQuotes = `-- name: SearchQuotes :many
SELECT q.id, q.thread_id, q.board, q.post_no, q.quote_text, q.quote_type, q.referenced_post_no, q.quote_context, q.created_at, p.name, p.user_id, p.timestamp 
FROM quotes q
JOIN posts p ON q.post_no = p.post_no AND q.thread_id = p.thread_id AND q.board = p.board
WHERE q.board = ? AND q.quote_text LIKE ?
ORDER BY q.post_no DESC
LIMIT ?
`

type SearchQuotesParams struct {
	Board     string `json:"board"`
	QuoteText string `json:"quote_text"`
	Limit     int64  `json:"limit"`
}

type SearchQuotesRow struct {
	ID               int64          `json:"id"`
	ThreadID         string         `json:"thread_id"`
	Board            string         `json:"board"`
	PostNo           int64          `json:"post_no"`
	QuoteText        string         `json:"quote_text"`
	QuoteType        string         `json:"quote_type"`
	ReferencedPostNo sql.NullInt64  `json:"referenced_post_no"`
	QuoteContext     sql.NullString `json:"quote_context"`
	CreatedAt        time.Time      `json:"created_at"`
	Name             string         `json:"name"`
	UserID           sql.NullString `json:"user_id"`
	Timestamp        int64          `json:"timestamp"`
}

func (q *Queries) SearchQuotes(ctx context.Context, arg SearchQuotesParams) ([]SearchQuotesRow, error) {
	rows, err := q.db.QueryContext(ctx, searchQuotes, arg.Board, arg.QuoteText, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchQuotesRow{}
	for rows.Next() {
		var i SearchQuotesRow
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.QuoteText,
			&i.QuoteType,
			&i.ReferencedPostNo,
			&i.QuoteContext,
			&i.CreatedAt,
			&i.Name,
			&i.UserID,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
