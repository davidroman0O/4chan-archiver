// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
)

const countPostsByThread = `-- name: CountPostsByThread :one
SELECT COUNT(*) as post_count FROM posts 
WHERE thread_id = ? AND board = ?
`

type CountPostsByThreadParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
}

func (q *Queries) CountPostsByThread(ctx context.Context, arg CountPostsByThreadParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPostsByThread, arg.ThreadID, arg.Board)
	var post_count int64
	err := row.Scan(&post_count)
	return post_count, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    thread_id, board, post_no, timestamp, name, user_id, 
    country, country_name, flag, flag_name, subject, comment, clean_text,
    filename, file_ext, file_size, image_width, image_height, 
    thumbnail_width, thumbnail_height, md5_hash, is_op
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, thread_id, board, post_no, timestamp, name, user_id, country, country_name, flag, flag_name, subject, comment, clean_text, filename, file_ext, file_size, image_width, image_height, thumbnail_width, thumbnail_height, md5_hash, is_op, created_at
`

type CreatePostParams struct {
	ThreadID        string         `json:"thread_id"`
	Board           string         `json:"board"`
	PostNo          int64          `json:"post_no"`
	Timestamp       int64          `json:"timestamp"`
	Name            string         `json:"name"`
	UserID          sql.NullString `json:"user_id"`
	Country         sql.NullString `json:"country"`
	CountryName     sql.NullString `json:"country_name"`
	Flag            sql.NullString `json:"flag"`
	FlagName        sql.NullString `json:"flag_name"`
	Subject         sql.NullString `json:"subject"`
	Comment         sql.NullString `json:"comment"`
	CleanText       sql.NullString `json:"clean_text"`
	Filename        sql.NullString `json:"filename"`
	FileExt         sql.NullString `json:"file_ext"`
	FileSize        sql.NullInt64  `json:"file_size"`
	ImageWidth      sql.NullInt64  `json:"image_width"`
	ImageHeight     sql.NullInt64  `json:"image_height"`
	ThumbnailWidth  sql.NullInt64  `json:"thumbnail_width"`
	ThumbnailHeight sql.NullInt64  `json:"thumbnail_height"`
	Md5Hash         sql.NullString `json:"md5_hash"`
	IsOp            sql.NullBool   `json:"is_op"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ThreadID,
		arg.Board,
		arg.PostNo,
		arg.Timestamp,
		arg.Name,
		arg.UserID,
		arg.Country,
		arg.CountryName,
		arg.Flag,
		arg.FlagName,
		arg.Subject,
		arg.Comment,
		arg.CleanText,
		arg.Filename,
		arg.FileExt,
		arg.FileSize,
		arg.ImageWidth,
		arg.ImageHeight,
		arg.ThumbnailWidth,
		arg.ThumbnailHeight,
		arg.Md5Hash,
		arg.IsOp,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Board,
		&i.PostNo,
		&i.Timestamp,
		&i.Name,
		&i.UserID,
		&i.Country,
		&i.CountryName,
		&i.Flag,
		&i.FlagName,
		&i.Subject,
		&i.Comment,
		&i.CleanText,
		&i.Filename,
		&i.FileExt,
		&i.FileSize,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.ThumbnailWidth,
		&i.ThumbnailHeight,
		&i.Md5Hash,
		&i.IsOp,
		&i.CreatedAt,
	)
	return i, err
}

const getOriginalPost = `-- name: GetOriginalPost :one
SELECT id, thread_id, board, post_no, timestamp, name, user_id, country, country_name, flag, flag_name, subject, comment, clean_text, filename, file_ext, file_size, image_width, image_height, thumbnail_width, thumbnail_height, md5_hash, is_op, created_at FROM posts 
WHERE thread_id = ? AND board = ? AND is_op = TRUE
`

type GetOriginalPostParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
}

func (q *Queries) GetOriginalPost(ctx context.Context, arg GetOriginalPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, getOriginalPost, arg.ThreadID, arg.Board)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Board,
		&i.PostNo,
		&i.Timestamp,
		&i.Name,
		&i.UserID,
		&i.Country,
		&i.CountryName,
		&i.Flag,
		&i.FlagName,
		&i.Subject,
		&i.Comment,
		&i.CleanText,
		&i.Filename,
		&i.FileExt,
		&i.FileSize,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.ThumbnailWidth,
		&i.ThumbnailHeight,
		&i.Md5Hash,
		&i.IsOp,
		&i.CreatedAt,
	)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, thread_id, board, post_no, timestamp, name, user_id, country, country_name, flag, flag_name, subject, comment, clean_text, filename, file_ext, file_size, image_width, image_height, thumbnail_width, thumbnail_height, md5_hash, is_op, created_at FROM posts 
WHERE thread_id = ? AND board = ? AND post_no = ?
`

type GetPostParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
	PostNo   int64  `json:"post_no"`
}

func (q *Queries) GetPost(ctx context.Context, arg GetPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, arg.ThreadID, arg.Board, arg.PostNo)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Board,
		&i.PostNo,
		&i.Timestamp,
		&i.Name,
		&i.UserID,
		&i.Country,
		&i.CountryName,
		&i.Flag,
		&i.FlagName,
		&i.Subject,
		&i.Comment,
		&i.CleanText,
		&i.Filename,
		&i.FileExt,
		&i.FileSize,
		&i.ImageWidth,
		&i.ImageHeight,
		&i.ThumbnailWidth,
		&i.ThumbnailHeight,
		&i.Md5Hash,
		&i.IsOp,
		&i.CreatedAt,
	)
	return i, err
}

const getPostsByThread = `-- name: GetPostsByThread :many
SELECT id, thread_id, board, post_no, timestamp, name, user_id, country, country_name, flag, flag_name, subject, comment, clean_text, filename, file_ext, file_size, image_width, image_height, thumbnail_width, thumbnail_height, md5_hash, is_op, created_at FROM posts 
WHERE thread_id = ? AND board = ?
ORDER BY post_no ASC
`

type GetPostsByThreadParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
}

func (q *Queries) GetPostsByThread(ctx context.Context, arg GetPostsByThreadParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByThread, arg.ThreadID, arg.Board)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.Timestamp,
			&i.Name,
			&i.UserID,
			&i.Country,
			&i.CountryName,
			&i.Flag,
			&i.FlagName,
			&i.Subject,
			&i.Comment,
			&i.CleanText,
			&i.Filename,
			&i.FileExt,
			&i.FileSize,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.ThumbnailWidth,
			&i.ThumbnailHeight,
			&i.Md5Hash,
			&i.IsOp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT id, thread_id, board, post_no, timestamp, name, user_id, country, country_name, flag, flag_name, subject, comment, clean_text, filename, file_ext, file_size, image_width, image_height, thumbnail_width, thumbnail_height, md5_hash, is_op, created_at FROM posts 
WHERE board = ? AND user_id = ?
ORDER BY timestamp DESC
`

type GetPostsByUserParams struct {
	Board  string         `json:"board"`
	UserID sql.NullString `json:"user_id"`
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.Board, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.Timestamp,
			&i.Name,
			&i.UserID,
			&i.Country,
			&i.CountryName,
			&i.Flag,
			&i.FlagName,
			&i.Subject,
			&i.Comment,
			&i.CleanText,
			&i.Filename,
			&i.FileExt,
			&i.FileSize,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.ThumbnailWidth,
			&i.ThumbnailHeight,
			&i.Md5Hash,
			&i.IsOp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentPosts = `-- name: GetRecentPosts :many
SELECT id, thread_id, board, post_no, timestamp, name, user_id, country, country_name, flag, flag_name, subject, comment, clean_text, filename, file_ext, file_size, image_width, image_height, thumbnail_width, thumbnail_height, md5_hash, is_op, created_at FROM posts 
WHERE board = ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetRecentPostsParams struct {
	Board string `json:"board"`
	Limit int64  `json:"limit"`
}

func (q *Queries) GetRecentPosts(ctx context.Context, arg GetRecentPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getRecentPosts, arg.Board, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.Timestamp,
			&i.Name,
			&i.UserID,
			&i.Country,
			&i.CountryName,
			&i.Flag,
			&i.FlagName,
			&i.Subject,
			&i.Comment,
			&i.CleanText,
			&i.Filename,
			&i.FileExt,
			&i.FileSize,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.ThumbnailWidth,
			&i.ThumbnailHeight,
			&i.Md5Hash,
			&i.IsOp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPosts = `-- name: SearchPosts :many
SELECT id, thread_id, board, post_no, timestamp, name, user_id, country, country_name, flag, flag_name, subject, comment, clean_text, filename, file_ext, file_size, image_width, image_height, thumbnail_width, thumbnail_height, md5_hash, is_op, created_at FROM posts 
WHERE board = ? AND clean_text LIKE ?
ORDER BY timestamp DESC
LIMIT ?
`

type SearchPostsParams struct {
	Board     string         `json:"board"`
	CleanText sql.NullString `json:"clean_text"`
	Limit     int64          `json:"limit"`
}

func (q *Queries) SearchPosts(ctx context.Context, arg SearchPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, searchPosts, arg.Board, arg.CleanText, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.Timestamp,
			&i.Name,
			&i.UserID,
			&i.Country,
			&i.CountryName,
			&i.Flag,
			&i.FlagName,
			&i.Subject,
			&i.Comment,
			&i.CleanText,
			&i.Filename,
			&i.FileExt,
			&i.FileSize,
			&i.ImageWidth,
			&i.ImageHeight,
			&i.ThumbnailWidth,
			&i.ThumbnailHeight,
			&i.Md5Hash,
			&i.IsOp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
