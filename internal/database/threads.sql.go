// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: threads.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createThread = `-- name: CreateThread :one
INSERT INTO threads (
    thread_id, board, subject, created_at, last_updated, posts_count, media_count, status
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, thread_id, board, subject, created_at, last_updated, posts_count, media_count, status
`

type CreateThreadParams struct {
	ThreadID    string         `json:"thread_id"`
	Board       string         `json:"board"`
	Subject     sql.NullString `json:"subject"`
	CreatedAt   time.Time      `json:"created_at"`
	LastUpdated time.Time      `json:"last_updated"`
	PostsCount  sql.NullInt64  `json:"posts_count"`
	MediaCount  sql.NullInt64  `json:"media_count"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, createThread,
		arg.ThreadID,
		arg.Board,
		arg.Subject,
		arg.CreatedAt,
		arg.LastUpdated,
		arg.PostsCount,
		arg.MediaCount,
		arg.Status,
	)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Board,
		&i.Subject,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.PostsCount,
		&i.MediaCount,
		&i.Status,
	)
	return i, err
}

const getThread = `-- name: GetThread :one
SELECT id, thread_id, board, subject, created_at, last_updated, posts_count, media_count, status FROM threads 
WHERE thread_id = ? AND board = ?
`

type GetThreadParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
}

func (q *Queries) GetThread(ctx context.Context, arg GetThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, getThread, arg.ThreadID, arg.Board)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Board,
		&i.Subject,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.PostsCount,
		&i.MediaCount,
		&i.Status,
	)
	return i, err
}

const getThreadStats = `-- name: GetThreadStats :one
SELECT 
    COUNT(*) as total_threads,
    SUM(posts_count) as total_posts,
    SUM(media_count) as total_media
FROM threads 
WHERE board = ?
`

type GetThreadStatsRow struct {
	TotalThreads int64           `json:"total_threads"`
	TotalPosts   sql.NullFloat64 `json:"total_posts"`
	TotalMedia   sql.NullFloat64 `json:"total_media"`
}

func (q *Queries) GetThreadStats(ctx context.Context, board string) (GetThreadStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getThreadStats, board)
	var i GetThreadStatsRow
	err := row.Scan(&i.TotalThreads, &i.TotalPosts, &i.TotalMedia)
	return i, err
}

const listThreads = `-- name: ListThreads :many
SELECT id, thread_id, board, subject, created_at, last_updated, posts_count, media_count, status FROM threads
WHERE board = ?
ORDER BY last_updated DESC
`

func (q *Queries) ListThreads(ctx context.Context, board string) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, listThreads, board)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Thread{}
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.Subject,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.PostsCount,
			&i.MediaCount,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateThread = `-- name: UpdateThread :exec
UPDATE threads 
SET last_updated = ?, posts_count = ?, media_count = ?, status = ?
WHERE thread_id = ? AND board = ?
`

type UpdateThreadParams struct {
	LastUpdated time.Time      `json:"last_updated"`
	PostsCount  sql.NullInt64  `json:"posts_count"`
	MediaCount  sql.NullInt64  `json:"media_count"`
	Status      sql.NullString `json:"status"`
	ThreadID    string         `json:"thread_id"`
	Board       string         `json:"board"`
}

func (q *Queries) UpdateThread(ctx context.Context, arg UpdateThreadParams) error {
	_, err := q.db.ExecContext(ctx, updateThread,
		arg.LastUpdated,
		arg.PostsCount,
		arg.MediaCount,
		arg.Status,
		arg.ThreadID,
		arg.Board,
	)
	return err
}
