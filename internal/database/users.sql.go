// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    board, user_id, name, tripcode, country, country_name, flag, flag_name,
    first_seen, last_seen, post_count, total_media_posts, avg_post_length, most_common_board
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, board, user_id, name, tripcode, country, country_name, flag, flag_name, first_seen, last_seen, post_count, total_media_posts, avg_post_length, most_common_board
`

type CreateUserParams struct {
	Board           string          `json:"board"`
	UserID          string          `json:"user_id"`
	Name            string          `json:"name"`
	Tripcode        sql.NullString  `json:"tripcode"`
	Country         sql.NullString  `json:"country"`
	CountryName     sql.NullString  `json:"country_name"`
	Flag            sql.NullString  `json:"flag"`
	FlagName        sql.NullString  `json:"flag_name"`
	FirstSeen       time.Time       `json:"first_seen"`
	LastSeen        time.Time       `json:"last_seen"`
	PostCount       sql.NullInt64   `json:"post_count"`
	TotalMediaPosts sql.NullInt64   `json:"total_media_posts"`
	AvgPostLength   sql.NullFloat64 `json:"avg_post_length"`
	MostCommonBoard sql.NullString  `json:"most_common_board"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Board,
		arg.UserID,
		arg.Name,
		arg.Tripcode,
		arg.Country,
		arg.CountryName,
		arg.Flag,
		arg.FlagName,
		arg.FirstSeen,
		arg.LastSeen,
		arg.PostCount,
		arg.TotalMediaPosts,
		arg.AvgPostLength,
		arg.MostCommonBoard,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Board,
		&i.UserID,
		&i.Name,
		&i.Tripcode,
		&i.Country,
		&i.CountryName,
		&i.Flag,
		&i.FlagName,
		&i.FirstSeen,
		&i.LastSeen,
		&i.PostCount,
		&i.TotalMediaPosts,
		&i.AvgPostLength,
		&i.MostCommonBoard,
	)
	return i, err
}

const getActiveUsers = `-- name: GetActiveUsers :many
SELECT u.id, u.board, u.user_id, u.name, u.tripcode, u.country, u.country_name, u.flag, u.flag_name, u.first_seen, u.last_seen, u.post_count, u.total_media_posts, u.avg_post_length, u.most_common_board, p.timestamp as last_post_time
FROM users u
JOIN posts p ON u.user_id = p.user_id AND u.board = p.board
WHERE u.board = ? AND p.timestamp > ?
GROUP BY u.user_id
ORDER BY p.timestamp DESC
`

type GetActiveUsersParams struct {
	Board     string `json:"board"`
	Timestamp int64  `json:"timestamp"`
}

type GetActiveUsersRow struct {
	ID              int64           `json:"id"`
	Board           string          `json:"board"`
	UserID          string          `json:"user_id"`
	Name            string          `json:"name"`
	Tripcode        sql.NullString  `json:"tripcode"`
	Country         sql.NullString  `json:"country"`
	CountryName     sql.NullString  `json:"country_name"`
	Flag            sql.NullString  `json:"flag"`
	FlagName        sql.NullString  `json:"flag_name"`
	FirstSeen       time.Time       `json:"first_seen"`
	LastSeen        time.Time       `json:"last_seen"`
	PostCount       sql.NullInt64   `json:"post_count"`
	TotalMediaPosts sql.NullInt64   `json:"total_media_posts"`
	AvgPostLength   sql.NullFloat64 `json:"avg_post_length"`
	MostCommonBoard sql.NullString  `json:"most_common_board"`
	LastPostTime    int64           `json:"last_post_time"`
}

func (q *Queries) GetActiveUsers(ctx context.Context, arg GetActiveUsersParams) ([]GetActiveUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getActiveUsers, arg.Board, arg.Timestamp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetActiveUsersRow{}
	for rows.Next() {
		var i GetActiveUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Board,
			&i.UserID,
			&i.Name,
			&i.Tripcode,
			&i.Country,
			&i.CountryName,
			&i.Flag,
			&i.FlagName,
			&i.FirstSeen,
			&i.LastSeen,
			&i.PostCount,
			&i.TotalMediaPosts,
			&i.AvgPostLength,
			&i.MostCommonBoard,
			&i.LastPostTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopUsers = `-- name: GetTopUsers :many
SELECT id, board, user_id, name, tripcode, country, country_name, flag, flag_name, first_seen, last_seen, post_count, total_media_posts, avg_post_length, most_common_board FROM users 
WHERE board = ?
ORDER BY post_count DESC
LIMIT ?
`

type GetTopUsersParams struct {
	Board string `json:"board"`
	Limit int64  `json:"limit"`
}

func (q *Queries) GetTopUsers(ctx context.Context, arg GetTopUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getTopUsers, arg.Board, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Board,
			&i.UserID,
			&i.Name,
			&i.Tripcode,
			&i.Country,
			&i.CountryName,
			&i.Flag,
			&i.FlagName,
			&i.FirstSeen,
			&i.LastSeen,
			&i.PostCount,
			&i.TotalMediaPosts,
			&i.AvgPostLength,
			&i.MostCommonBoard,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, board, user_id, name, tripcode, country, country_name, flag, flag_name, first_seen, last_seen, post_count, total_media_posts, avg_post_length, most_common_board FROM users 
WHERE board = ? AND user_id = ?
`

type GetUserParams struct {
	Board  string `json:"board"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.Board, arg.UserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Board,
		&i.UserID,
		&i.Name,
		&i.Tripcode,
		&i.Country,
		&i.CountryName,
		&i.Flag,
		&i.FlagName,
		&i.FirstSeen,
		&i.LastSeen,
		&i.PostCount,
		&i.TotalMediaPosts,
		&i.AvgPostLength,
		&i.MostCommonBoard,
	)
	return i, err
}

const getUsersByCountry = `-- name: GetUsersByCountry :many
SELECT id, board, user_id, name, tripcode, country, country_name, flag, flag_name, first_seen, last_seen, post_count, total_media_posts, avg_post_length, most_common_board FROM users 
WHERE board = ? AND country = ?
ORDER BY post_count DESC
`

type GetUsersByCountryParams struct {
	Board   string         `json:"board"`
	Country sql.NullString `json:"country"`
}

func (q *Queries) GetUsersByCountry(ctx context.Context, arg GetUsersByCountryParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByCountry, arg.Board, arg.Country)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Board,
			&i.UserID,
			&i.Name,
			&i.Tripcode,
			&i.Country,
			&i.CountryName,
			&i.Flag,
			&i.FlagName,
			&i.FirstSeen,
			&i.LastSeen,
			&i.PostCount,
			&i.TotalMediaPosts,
			&i.AvgPostLength,
			&i.MostCommonBoard,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET last_seen = ?, post_count = ?
WHERE board = ? AND user_id = ?
`

type UpdateUserParams struct {
	LastSeen  time.Time     `json:"last_seen"`
	PostCount sql.NullInt64 `json:"post_count"`
	Board     string        `json:"board"`
	UserID    string        `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.LastSeen,
		arg.PostCount,
		arg.Board,
		arg.UserID,
	)
	return err
}

const upsertUser = `-- name: UpsertUser :exec
INSERT INTO users (
    board, user_id, name, tripcode, country, country_name, flag, flag_name,
    first_seen, last_seen, post_count, total_media_posts, avg_post_length, most_common_board
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 1, ?, ?, ?
)
ON CONFLICT(board, user_id) DO UPDATE SET
    last_seen = excluded.last_seen,
    post_count = post_count + 1,
    total_media_posts = excluded.total_media_posts,
    avg_post_length = excluded.avg_post_length,
    most_common_board = excluded.most_common_board
`

type UpsertUserParams struct {
	Board           string          `json:"board"`
	UserID          string          `json:"user_id"`
	Name            string          `json:"name"`
	Tripcode        sql.NullString  `json:"tripcode"`
	Country         sql.NullString  `json:"country"`
	CountryName     sql.NullString  `json:"country_name"`
	Flag            sql.NullString  `json:"flag"`
	FlagName        sql.NullString  `json:"flag_name"`
	FirstSeen       time.Time       `json:"first_seen"`
	LastSeen        time.Time       `json:"last_seen"`
	TotalMediaPosts sql.NullInt64   `json:"total_media_posts"`
	AvgPostLength   sql.NullFloat64 `json:"avg_post_length"`
	MostCommonBoard sql.NullString  `json:"most_common_board"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) error {
	_, err := q.db.ExecContext(ctx, upsertUser,
		arg.Board,
		arg.UserID,
		arg.Name,
		arg.Tripcode,
		arg.Country,
		arg.CountryName,
		arg.Flag,
		arg.FlagName,
		arg.FirstSeen,
		arg.LastSeen,
		arg.TotalMediaPosts,
		arg.AvgPostLength,
		arg.MostCommonBoard,
	)
	return err
}
