// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: media.sql

package database

import (
	"context"
	"database/sql"
)

const countMediaByThread = `-- name: CountMediaByThread :one
SELECT COUNT(*) as media_count FROM media 
WHERE thread_id = ? AND board = ?
`

type CountMediaByThreadParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
}

func (q *Queries) CountMediaByThread(ctx context.Context, arg CountMediaByThreadParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMediaByThread, arg.ThreadID, arg.Board)
	var media_count int64
	err := row.Scan(&media_count)
	return media_count, err
}

const createMedia = `-- name: CreateMedia :one
INSERT INTO media (
    thread_id, board, post_no, filename, original_filename, file_ext, 
    file_size, width, height, md5_hash, media_type, source_url, thumbnail_url,
    local_path, download_status, download_attempts, last_download_attempt
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, thread_id, board, post_no, filename, original_filename, file_ext, file_size, width, height, md5_hash, media_type, source_url, thumbnail_url, local_path, download_status, download_attempts, last_download_attempt, created_at
`

type CreateMediaParams struct {
	ThreadID            string         `json:"thread_id"`
	Board               string         `json:"board"`
	PostNo              int64          `json:"post_no"`
	Filename            string         `json:"filename"`
	OriginalFilename    sql.NullString `json:"original_filename"`
	FileExt             sql.NullString `json:"file_ext"`
	FileSize            sql.NullInt64  `json:"file_size"`
	Width               sql.NullInt64  `json:"width"`
	Height              sql.NullInt64  `json:"height"`
	Md5Hash             sql.NullString `json:"md5_hash"`
	MediaType           sql.NullString `json:"media_type"`
	SourceUrl           sql.NullString `json:"source_url"`
	ThumbnailUrl        sql.NullString `json:"thumbnail_url"`
	LocalPath           sql.NullString `json:"local_path"`
	DownloadStatus      sql.NullString `json:"download_status"`
	DownloadAttempts    sql.NullInt64  `json:"download_attempts"`
	LastDownloadAttempt sql.NullTime   `json:"last_download_attempt"`
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (Medium, error) {
	row := q.db.QueryRowContext(ctx, createMedia,
		arg.ThreadID,
		arg.Board,
		arg.PostNo,
		arg.Filename,
		arg.OriginalFilename,
		arg.FileExt,
		arg.FileSize,
		arg.Width,
		arg.Height,
		arg.Md5Hash,
		arg.MediaType,
		arg.SourceUrl,
		arg.ThumbnailUrl,
		arg.LocalPath,
		arg.DownloadStatus,
		arg.DownloadAttempts,
		arg.LastDownloadAttempt,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Board,
		&i.PostNo,
		&i.Filename,
		&i.OriginalFilename,
		&i.FileExt,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.Md5Hash,
		&i.MediaType,
		&i.SourceUrl,
		&i.ThumbnailUrl,
		&i.LocalPath,
		&i.DownloadStatus,
		&i.DownloadAttempts,
		&i.LastDownloadAttempt,
		&i.CreatedAt,
	)
	return i, err
}

const getDownloadedMedia = `-- name: GetDownloadedMedia :many
SELECT id, thread_id, board, post_no, filename, original_filename, file_ext, file_size, width, height, md5_hash, media_type, source_url, thumbnail_url, local_path, download_status, download_attempts, last_download_attempt, created_at FROM media 
WHERE board = ? AND download_status = 'downloaded'
ORDER BY created_at DESC
LIMIT ?
`

type GetDownloadedMediaParams struct {
	Board string `json:"board"`
	Limit int64  `json:"limit"`
}

func (q *Queries) GetDownloadedMedia(ctx context.Context, arg GetDownloadedMediaParams) ([]Medium, error) {
	rows, err := q.db.QueryContext(ctx, getDownloadedMedia, arg.Board, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medium{}
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.Filename,
			&i.OriginalFilename,
			&i.FileExt,
			&i.FileSize,
			&i.Width,
			&i.Height,
			&i.Md5Hash,
			&i.MediaType,
			&i.SourceUrl,
			&i.ThumbnailUrl,
			&i.LocalPath,
			&i.DownloadStatus,
			&i.DownloadAttempts,
			&i.LastDownloadAttempt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFailedDownloads = `-- name: GetFailedDownloads :many
SELECT id, thread_id, board, post_no, filename, original_filename, file_ext, file_size, width, height, md5_hash, media_type, source_url, thumbnail_url, local_path, download_status, download_attempts, last_download_attempt, created_at FROM media 
WHERE board = ? AND download_status = 'failed'
ORDER BY created_at DESC
`

func (q *Queries) GetFailedDownloads(ctx context.Context, board string) ([]Medium, error) {
	rows, err := q.db.QueryContext(ctx, getFailedDownloads, board)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medium{}
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.Filename,
			&i.OriginalFilename,
			&i.FileExt,
			&i.FileSize,
			&i.Width,
			&i.Height,
			&i.Md5Hash,
			&i.MediaType,
			&i.SourceUrl,
			&i.ThumbnailUrl,
			&i.LocalPath,
			&i.DownloadStatus,
			&i.DownloadAttempts,
			&i.LastDownloadAttempt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMedia = `-- name: GetMedia :one
SELECT id, thread_id, board, post_no, filename, original_filename, file_ext, file_size, width, height, md5_hash, media_type, source_url, thumbnail_url, local_path, download_status, download_attempts, last_download_attempt, created_at FROM media 
WHERE thread_id = ? AND board = ? AND post_no = ? AND filename = ?
`

type GetMediaParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
	PostNo   int64  `json:"post_no"`
	Filename string `json:"filename"`
}

func (q *Queries) GetMedia(ctx context.Context, arg GetMediaParams) (Medium, error) {
	row := q.db.QueryRowContext(ctx, getMedia,
		arg.ThreadID,
		arg.Board,
		arg.PostNo,
		arg.Filename,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Board,
		&i.PostNo,
		&i.Filename,
		&i.OriginalFilename,
		&i.FileExt,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.Md5Hash,
		&i.MediaType,
		&i.SourceUrl,
		&i.ThumbnailUrl,
		&i.LocalPath,
		&i.DownloadStatus,
		&i.DownloadAttempts,
		&i.LastDownloadAttempt,
		&i.CreatedAt,
	)
	return i, err
}

const getMediaByPost = `-- name: GetMediaByPost :many
SELECT id, thread_id, board, post_no, filename, original_filename, file_ext, file_size, width, height, md5_hash, media_type, source_url, thumbnail_url, local_path, download_status, download_attempts, last_download_attempt, created_at FROM media 
WHERE thread_id = ? AND board = ? AND post_no = ?
`

type GetMediaByPostParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
	PostNo   int64  `json:"post_no"`
}

func (q *Queries) GetMediaByPost(ctx context.Context, arg GetMediaByPostParams) ([]Medium, error) {
	rows, err := q.db.QueryContext(ctx, getMediaByPost, arg.ThreadID, arg.Board, arg.PostNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medium{}
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.Filename,
			&i.OriginalFilename,
			&i.FileExt,
			&i.FileSize,
			&i.Width,
			&i.Height,
			&i.Md5Hash,
			&i.MediaType,
			&i.SourceUrl,
			&i.ThumbnailUrl,
			&i.LocalPath,
			&i.DownloadStatus,
			&i.DownloadAttempts,
			&i.LastDownloadAttempt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMediaByThread = `-- name: GetMediaByThread :many
SELECT id, thread_id, board, post_no, filename, original_filename, file_ext, file_size, width, height, md5_hash, media_type, source_url, thumbnail_url, local_path, download_status, download_attempts, last_download_attempt, created_at FROM media 
WHERE thread_id = ? AND board = ?
ORDER BY post_no ASC
`

type GetMediaByThreadParams struct {
	ThreadID string `json:"thread_id"`
	Board    string `json:"board"`
}

func (q *Queries) GetMediaByThread(ctx context.Context, arg GetMediaByThreadParams) ([]Medium, error) {
	rows, err := q.db.QueryContext(ctx, getMediaByThread, arg.ThreadID, arg.Board)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medium{}
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Board,
			&i.PostNo,
			&i.Filename,
			&i.OriginalFilename,
			&i.FileExt,
			&i.FileSize,
			&i.Width,
			&i.Height,
			&i.Md5Hash,
			&i.MediaType,
			&i.SourceUrl,
			&i.ThumbnailUrl,
			&i.LocalPath,
			&i.DownloadStatus,
			&i.DownloadAttempts,
			&i.LastDownloadAttempt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMediaStatus = `-- name: UpdateMediaStatus :exec
UPDATE media 
SET download_status = ?
WHERE thread_id = ? AND board = ? AND post_no = ? AND filename = ?
`

type UpdateMediaStatusParams struct {
	DownloadStatus sql.NullString `json:"download_status"`
	ThreadID       string         `json:"thread_id"`
	Board          string         `json:"board"`
	PostNo         int64          `json:"post_no"`
	Filename       string         `json:"filename"`
}

func (q *Queries) UpdateMediaStatus(ctx context.Context, arg UpdateMediaStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateMediaStatus,
		arg.DownloadStatus,
		arg.ThreadID,
		arg.Board,
		arg.PostNo,
		arg.Filename,
	)
	return err
}
